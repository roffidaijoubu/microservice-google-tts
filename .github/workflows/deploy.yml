name: CI/CD Pipeline for Google TTS Microservice

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t roffidaijoubu/microservice-google-tts:latest .
          docker push roffidaijoubu/microservice-google-tts:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        env:
          SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          DOMAIN: ${{ secrets.DOMAIN }}
          TRAEFIK_ACME_EMAIL: ${{ secrets.TRAEFIK_ACME_EMAIL }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

          # Set deploy path with fallback
          DEPLOY_DIR="${DEPLOY_PATH:-/var/www/microservice-google-tts}"

          # Create .env file
          echo "DOMAIN=${DOMAIN}" > .env
          echo "TRAEFIK_ACME_EMAIL=${TRAEFIK_ACME_EMAIL}" >> .env

          # Deploy
          ssh $VPS_USER@$VPS_HOST "
            # Create directories
            mkdir -p ${DEPLOY_DIR}
            mkdir -p ${DEPLOY_DIR}/letsencrypt

            # Check if network exists, create if it doesn't
            if ! docker network ls | grep -q 'web'; then
              echo 'Creating web network...'
              docker network create web
            else
              echo 'Web network already exists'
            fi
          "

          scp .env docker-compose.yml $VPS_USER@$VPS_HOST:${DEPLOY_DIR}/
          
          ssh $VPS_USER@$VPS_HOST "
            cd ${DEPLOY_DIR} && 
            docker-compose down --remove-orphans &&
            if ! docker ps --format '{{.Names}}' | grep -E '(^traefik$|^/traefik$|_traefik_)' >/dev/null; then
              echo 'No Traefik found, starting everything...'
              docker-compose up -d
            else
              echo 'Traefik already running, starting only microservice...'
              docker-compose up -d microservice-google-tts
            fi
          "